#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<cmath>
#include<algorithm>
#include<climits>
#include<set>
#include<deque>
#include<queue>
#include<map>
#include<climits>
#include<string>
#include<stack>
#include<sstream>
using namespace std;
#define pi (2.0*acos(0.0))
#define eps 1e-6
#define ll long long
#define inf (1<<29)
#define vi vector<int>
#define vll vector<ll>
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define all(v) v.begin() , v.end()
#define me(a,val) memset( a , val ,sizeof(a) )
#define pb(x) push_back(x)
#define pii pair<int,int> 
#define mp(a,b) make_pair(a,b)
#define Q(x) (x) * (x)
#define L(x) ((x<<1) + 1)
#define R(x) ((x<<1) + 2)
#define fi first
#define se second
#define MOD 1000000007
#define ios ios::sync_with_stdio(0);
#define N 100001

pii P[N];
pii I[N] , ans[N];

int main(){
    int tc , M , test = 0;
    //sc(tc);
    tc = 1;
    while( tc-- ){
        //if( test++ ) printf("\n");
        int n = 0;
        sc(M);
        while( 1 ){
            scanf("%d%d",&P[n].fi,&P[n].se);
            if( P[n].fi == 0 and P[n].se == 0 ) break;
            n++;
        }
        sort( P , P + n );
        int next = 0;
        int i = 0;
        int m = 0;
        int sz = 0;
        pii choose;
        while( i < n ){
            while( i < n and P[i].fi <= next ){
                
                if( P[i].se > m ){
                    m = P[i].se;
                    choose = P[i];
                }
                i++;
            }
            if( m <= next ){
                printf("No solution\n");
                return 0;
            }
            if( m > next ){
                ans[sz++] = choose;
                next = m;
            }
            if( m >= M ) break;
        }
        if( m < M ){
            printf("No solution\n");
                return 0;
        }
        sort( ans , ans + sz );
        printf("%d\n",sz);
        for(int i = 0 ; i < sz ; i++)
            printf("%d %d\n",ans[i].fi,ans[i].se);
            
        xx:;
    }
    
    return 0;
}
