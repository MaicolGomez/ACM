#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<cmath>
#include<algorithm>
#include<climits>
#include<set>
#include<deque>
#include<queue>
#include<map>
#include<climits>
#include<string>
#include<stack>
#include<sstream>
using namespace std;
#define pi (2.0*acos(0.0))
#define eps 1e-6
#define ll long long
#define inf (1<<30)
#define vi vector<int>
#define vll vector<ll>
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define all(v) v.begin() , v.end()
#define me(a,val) memset( a , val ,sizeof(a) )
#define pb(x) push_back(x)
#define pii pair<int,int> 
#define mp(a,b) make_pair(a,b)
#define Q(x) (x) * (x)
#define fi first
#define se second
#define MOD 10009
#define N 105

char s[N] , O[N];
int a[N] , t[N][N];

int main(){
    int tc;
    sc(tc); gets(s);
    while( tc-- ){
        gets(s);
        int n = 0 , o = 0;
        for(int i = 0 ; i < strlen(s) ; i++){
            if( s[i] >= '0' && s[i] <= '9' ) a[n++] = s[i] - '0';
            else O[o++] = s[i];
        }
        for(int i = 0 ; i < n ; i++)
            t[i][i] = a[i];
            
        for(int L = 2; L <= n; L++){
            for(int i = 0; i <= n-L; i++){
                int j = i+L-1;
                t[i][j] = 0;
                for(int k = i ; k <= j-1; k++){
                    // q = cost/scalar multiplications
                    if( O[k] == '+' ) t[i][j] = max( t[i][j] , t[i][k] + t[k+1][j] );
                    else t[i][j] = max( t[i][j] , t[i][k] * t[k+1][j] );
                }
            }
        }
        
        printf("%d ",t[0][n-1]);
        for(int L=2; L<=n; L++){
            for(int i = 0 ; i <= n-L; i++){
                int j = i+L-1;
                t[i][j] = INT_MAX;
                for(int k = i ; k <= j-1 ; k++){
                    // q = cost/scalar multiplications
                    if( O[k] == '+' ) t[i][j] = min( t[i][j] , t[i][k] + t[k+1][j] );
                    else t[i][j] = min( t[i][j] , t[i][k] * t[k+1][j] );
                }
            }
        }
        
        
        
        printf("%d\n",t[0][n-1]);
    }
    return 0;
}
