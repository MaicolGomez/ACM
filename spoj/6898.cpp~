#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<cmath>
#include<algorithm>
#include<climits>
#include<set>
#include<deque>
#include<queue>
#include<map>
#include<climits>
#include<string>
#include<stack>
#include<sstream>
using namespace std;
#define pi (2.0*acos(0.0))
#define eps 1e-6
#define ll long long
#define inf (1<<29)
#define vi vector<int>
#define vll vector<ll>
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define all(v) v.begin() , v.end()
#define me(a,val) memset( a , val ,sizeof(a) )
#define pb(x) push_back(x)
#define pii pair<int,int> 
#define mp(a,b) make_pair(a,b)
#define Q(x) (x) * (x)
#define L(x) ((x<<1) + 1)
#define R(x) ((x<<1) + 2)
#define M(x,y) ((x+y)>>1)
#define fi first
#define se second
#define MOD 1000000007
#define ios ios::sync_with_stdio(0);
#define N 100001
#define ALPH 128

struct state{ 
    int len, link, next[ALPH]; 
}; 
  
state st[ N * 2]; 
int sz, last; 
  
void sa_init(){ 
    sz = last = 0; 
    st[0].len = 0; 
    st[0].link = -1; 
    ++sz; 
} 
  
void sa_extend(char c){ 
    int cur = sz++;
    st[cur].len = st[last].len + 1; 
    int p; 
    for (p=last; p!=-1 && !st[p].next[c]; p=st[p].link) 
        st[p].next[c] = cur; 
    if (p == -1) 
        st[cur].link = 0; 
    else { 
        int q = st[p].next[c]; 
        if (st[p].len + 1 == st[q].len) 
            st[cur].link = q; 
        else { 
            int clone = sz++; 
            st[clone].len = st[p].len + 1; 
            memcpy(st[clone].next, st[q].next, ALPH * sizeof(int)); 
            st[clone].link = st[q].link; 
            for (; p!=-1 && st[p].next[c]==q; p=st[p].link) 
                st[p].next[c] = clone; 
            st[q].link = st[cur].link = clone; 
        } 
    } 
    last = cur; 
} 
  
int lcs(char *t){
    int v = 0, l = 0, best = 0, bestpos = 0; 
    int len = strlen(t);
    for(int i=0; i < len ; ++i){
        while (v && ! st[v].next[ t[i] ]) { 
            v = st[v].link; 
            l = st[v].len; 
        } 
        if (st[v].next[ t[i] ]) { 
            v = st[v].next[ t[i] ];
            ++l; 
        } 
        if (l > best) best = l,  bestpos = i; 
    } 
    return best; // t.substr (bestpos-best+1, best);
}

char t[N];

int main(){
    char s[2005];
    sa_init()
    scanf("%s",t);
    int l = strlen(t);
    for(int i = 0 ; i < l ; i++)
        sa_extend( t[i] );
    int n;
    scanf("%d",&n);
    for(int i = 0 ; i < n ; i++){
        scanf("%s",s);
        int x = lcs(s);
        if( x == strlen(s) ) printf("Y\n");
        else printf("N\n");
    }
    return 0;
}
