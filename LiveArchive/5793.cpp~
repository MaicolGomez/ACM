#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<cmath>
#include<algorithm>
#include<climits>
#include<set>
#include<deque>
#include<queue>
#include<map>
#include<climits>
#include<string>
#include<stack>
#include<sstream>
using namespace std;
#define pi (2.0*acos(0.0))
#define eps 1e-6
#define ll long long
#define inf (1<<30)
#define vi vector<int>
#define vll vector<ll>
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define all(v) v.begin() , v.end()
#define me(a,val) memset( a , val ,sizeof(a) )
#define pb(x) push_back(x)
#define pii pair<int,int>
#define mp(a,b) make_pair(a,b)
#define Q(x) (x) * (x)
#define L(x) ((x<<1) + 1)
#define R(x) ((x<<1) + 2)
#define fi first
#define se second
#define MOD 1000000007
#define N 20000

vi adj[N + 5];
vi cost[N + 5];
int comp[N + 5] , ncomp , C;
long long  X[N + 5];
map<int,int> M;
pair<long long , long long> T[N + 5];

int insert(int x){
    if( M.find(x) == M.end() )
        M[x] = C++;
    return M[x];
}

void dfs(int u , int sig){
    comp[u] = ncomp;
    int nsig = sig * -1;
    long long lastcost = T[u].fi;
    for(int i = 0 ; i < adj[u].size() ; i++){
        long long v = adj[u][i] , c = cost[u][i];
        if( comp[ v ] == -1 ){
            T[v].fi = c - lastcost , T[v].se = nsig;
            dfs( v , nsig );
        }
        else if( T[v].se == T[u].se ){
            if( T[u].se > 0 ) X[ ncomp ] = (c - lastcost - T[v].fi)/2;
            else X[ ncomp ] = (lastcost + T[v].fi - c)/2;
        }
    }
}

int main(){
    int q , m , x , y , z;
    while( scanf("%d%d",&m,&q) == 2 ){
        if( q == 0 && m == 0 ) break;
        
        M.clear();
        C = 0;
        ncomp = 0;
        for(int i = 0 ; i < 2 * m ; i++)
            cost[i].clear() , adj[i].clear() , X[i] = inf , T[i].se = 0 , T[i].fi = 0;
        me(comp , -1);
            
        for(int i = 0 ; i < m ; i++){
            scanf("%d%d%d",&x,&y,&z);
            x = insert( x );
            y = insert( y );
            adj[x].pb(y); cost[x].pb(z);
            adj[y].pb(x); cost[y].pb(z);
        }
        for(int i = 0 ; i < C ; i++)if( comp[i] == -1 ){
            T[i].fi = 0 , T[i].se = 1;
            dfs( i , 1 );
            ncomp++;
        }
        for(int i = 0 ; i < q ; i++){
            scanf("%d%d",&x,&y);
            if( M.find(x) == M.end() || M.find(y) == M.end() ){
                printf("*\n");
                continue;
            }
            x = M[x] , y = M[y];
            if( comp[ x ] != comp[ y ] ){
    if( X[ comp[x] ] != inf && X[ comp[y] ] != inf ) cout << T[x].fi + T[y].fi + T[x].se * X[ comp[x] ] + T[y].se * X[ comp[y] ] << '\n';
                else printf("*\n");
                continue;
            }
            if( T[x].se != T[y].se ) cout << T[x].fi + T[y].fi << '\n'; //printf("%lld\n", T[x].fi + T[y].fi );
            else if( X[ comp[x] ] != inf ) cout << T[x].fi + T[y].fi + 2 * T[x].se * X[ comp[x] ] << '\n'; //printf("%lld\n", T[x].fi + T[y].fi + 2 * T[x].se * X[ comp[x] ] );
            else printf("*\n");
        }
        printf("-\n");
    }
}
